#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 VertexPos_cameraspace;
in vec3 Normal_cameraspace;
in vec3 PointLightDirection_cameraspace;
in float DistanceVertexPointLight;
in vec3 DirectionalLightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D TextureSampler;
uniform float SpecularPower;

uniform vec3 PointLightColor;
uniform float PointLightPower;

uniform vec3 AmbientLightColor;
uniform float AmbientLightPower;

uniform vec3 DirectionalLightColor;
uniform float DirectionalLightPower;

void main(){
    // Output color = color specified in the vertex shader,
    // interpolated between all 3 surrounding vertices

    // Normal of the computed fragment, in camera space
    vec3 n = normalize( Normal_cameraspace );
    // Direction of the light (from the fragment to the light)
    vec3 pL = normalize( PointLightDirection_cameraspace );

    // Cosine of the angle between the normal and the light direction,
    // clamped above 0
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float cosPointLightDiffuse = clamp( dot( n,pL ), 0,1 );

    // Eye vector (towards the camera)
    vec3 E = normalize(-VertexPos_cameraspace) ;
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-pL,n);
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosPointLightSpecular = clamp( dot( E,R ), 0,1 );

    vec3 dL = normalize(-DirectionalLightDirection_cameraspace);
    float cosDirectionalLight = clamp( dot (n, dL), 0,1);
    float cosUp = clamp(dot(vec3(0,1,0), dL), 0,1);

    vec3 rgb = texture( TextureSampler, UV ).rgb;
    vec3 colorPointLighted = rgb * PointLightColor * PointLightPower * (cosPointLightDiffuse + pow(cosPointLightSpecular, SpecularPower)) / (DistanceVertexPointLight * DistanceVertexPointLight);
    vec3 colorAmbientLighted = rgb * AmbientLightColor * AmbientLightPower;
    vec3 colorDirectionalLighted = rgb * DirectionalLightPower * DirectionalLightColor * cosDirectionalLight * cosUp;
    //color = DirectionalLightDirection_cameraspace;
    color = colorPointLighted + colorAmbientLighted + colorDirectionalLighted;

}
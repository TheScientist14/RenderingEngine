#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 VertexPos_cameraspace;
in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;
in float distanceVertexLight;


// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D TextureSampler;
uniform vec3 LightColor;
uniform float LightPower;
uniform vec3 AmbientLightColor;

void main(){
    // Output color = color specified in the vertex shader,
    // interpolated between all 3 surrounding vertices

    // Normal of the computed fragment, in camera space
    vec3 n = normalize( Normal_cameraspace );
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize( LightDirection_cameraspace );

    // Cosine of the angle between the normal and the light direction,
    // clamped above 0
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float cosTheta = clamp( dot( n,l ), 0,1 );

    // Eye vector (towards the camera)
    vec3 E = normalize(-VertexPos_cameraspace) ;
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l,n);
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = clamp( dot( E,R ), 0,1 );

    vec3 rgb = texture( TextureSampler, UV ).rgb;
    color = rgb * LightColor * LightPower * cosTheta / (distanceVertexLight * distanceVertexLight)
        + rgb * AmbientLightColor
        + rgb * LightColor * LightPower * pow(cosAlpha, 5) / (distanceVertexLight * distanceVertexLight);
    //color = rgb;

}
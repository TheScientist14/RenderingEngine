#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
// Notice that the "1" here equals the "1" in glVertexAttribPointer
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;


// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 VertexPos_cameraspace;
out vec3 Normal_cameraspace;
out vec3 PointLightDirection_cameraspace;
out float DistanceVertexPointLight;
out vec3 DirectionalLightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform vec3 LightWorldPos;
uniform vec3 DirectionalLightDirection;

void main(){
    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

    // UV of the vertex. No special space for this one.
    UV = vertexUV;

    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

    // Position of the vertex, in worldspace : M * position
    vec3 Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;

    // Vector that goes from the vertex to the camera, in camera space.
    // In camera space, the camera is at the origin (0,0,0).
    vec3 vertexPosition_cameraspace = ( V * vec4(Position_worldspace,1)).xyz;
    VertexPos_cameraspace = vertexPosition_cameraspace;
    //vec3 EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

    // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
    vec3 PointLightPosition_cameraspace = ( V * vec4(PointLightWorldPos,1)).xyz;
    PointLightDirection_cameraspace = PointLightPosition_cameraspace - vertexPosition_cameraspace;

    // Normal of the the vertex, in camera space
    Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

    DistanceVertexPointLight = distance(Position_worldspace, PointLightWorldPos);

    DirectionalLightDirection_cameraspace = ( V * vec4(DirectionalLightDirection,1)).xyz;
}